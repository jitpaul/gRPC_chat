// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace chat {
class StreamRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamRequest>
      _instance;
  const ::chat::StartSession* startsession_request_;
  const ::chat::JoinSession* joinsession_request_;
  const ::chat::Message* message_request_;
  const ::chat::QuitSession* quitsession_request_;
} _StreamRequest_default_instance_;
class StreamResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamResponse>
      _instance;
  const ::chat::Login* login_response_;
  const ::chat::Logout* logout_response_;
  const ::chat::Message* message_response_;
  const ::chat::StartSessionResponse* startsession_response_;
  const ::chat::JoinSessionResponse* joinsession_response_;
} _StreamResponse_default_instance_;
class StartSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartSession>
      _instance;
} _StartSession_default_instance_;
class JoinSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinSession>
      _instance;
} _JoinSession_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
} _Message_default_instance_;
class QuitSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuitSession>
      _instance;
} _QuitSession_default_instance_;
class LoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Login>
      _instance;
} _Login_default_instance_;
class LogoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Logout>
      _instance;
} _Logout_default_instance_;
class StartSessionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartSessionResponse>
      _instance;
} _StartSessionResponse_default_instance_;
class JoinSessionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinSessionResponse>
      _instance;
} _JoinSessionResponse_default_instance_;
}  // namespace chat
namespace protobuf_chat_2eproto {
void InitDefaultsStreamRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_chat_2eproto::InitDefaultsStartSession();
  protobuf_chat_2eproto::InitDefaultsJoinSession();
  protobuf_chat_2eproto::InitDefaultsMessage();
  protobuf_chat_2eproto::InitDefaultsQuitSession();
  {
    void* ptr = &::chat::_StreamRequest_default_instance_;
    new (ptr) ::chat::StreamRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::StreamRequest::InitAsDefaultInstance();
}

void InitDefaultsStreamRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamRequestImpl);
}

void InitDefaultsStreamResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_chat_2eproto::InitDefaultsLogin();
  protobuf_chat_2eproto::InitDefaultsLogout();
  protobuf_chat_2eproto::InitDefaultsMessage();
  protobuf_chat_2eproto::InitDefaultsStartSessionResponse();
  protobuf_chat_2eproto::InitDefaultsJoinSessionResponse();
  {
    void* ptr = &::chat::_StreamResponse_default_instance_;
    new (ptr) ::chat::StreamResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::StreamResponse::InitAsDefaultInstance();
}

void InitDefaultsStreamResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamResponseImpl);
}

void InitDefaultsStartSessionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat::_StartSession_default_instance_;
    new (ptr) ::chat::StartSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::StartSession::InitAsDefaultInstance();
}

void InitDefaultsStartSession() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStartSessionImpl);
}

void InitDefaultsJoinSessionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat::_JoinSession_default_instance_;
    new (ptr) ::chat::JoinSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::JoinSession::InitAsDefaultInstance();
}

void InitDefaultsJoinSession() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsJoinSessionImpl);
}

void InitDefaultsMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat::_Message_default_instance_;
    new (ptr) ::chat::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::Message::InitAsDefaultInstance();
}

void InitDefaultsMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageImpl);
}

void InitDefaultsQuitSessionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat::_QuitSession_default_instance_;
    new (ptr) ::chat::QuitSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::QuitSession::InitAsDefaultInstance();
}

void InitDefaultsQuitSession() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuitSessionImpl);
}

void InitDefaultsLoginImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat::_Login_default_instance_;
    new (ptr) ::chat::Login();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::Login::InitAsDefaultInstance();
}

void InitDefaultsLogin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoginImpl);
}

void InitDefaultsLogoutImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat::_Logout_default_instance_;
    new (ptr) ::chat::Logout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::Logout::InitAsDefaultInstance();
}

void InitDefaultsLogout() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogoutImpl);
}

void InitDefaultsStartSessionResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat::_StartSessionResponse_default_instance_;
    new (ptr) ::chat::StartSessionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::StartSessionResponse::InitAsDefaultInstance();
}

void InitDefaultsStartSessionResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStartSessionResponseImpl);
}

void InitDefaultsJoinSessionResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::chat::_JoinSessionResponse_default_instance_;
    new (ptr) ::chat::JoinSessionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::JoinSessionResponse::InitAsDefaultInstance();
}

void InitDefaultsJoinSessionResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsJoinSessionResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::StreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::StreamRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::chat::StreamRequestDefaultTypeInternal, startsession_request_),
  offsetof(::chat::StreamRequestDefaultTypeInternal, joinsession_request_),
  offsetof(::chat::StreamRequestDefaultTypeInternal, message_request_),
  offsetof(::chat::StreamRequestDefaultTypeInternal, quitsession_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::StreamRequest, RequestEvent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::StreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::StreamResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::chat::StreamResponseDefaultTypeInternal, login_response_),
  offsetof(::chat::StreamResponseDefaultTypeInternal, logout_response_),
  offsetof(::chat::StreamResponseDefaultTypeInternal, message_response_),
  offsetof(::chat::StreamResponseDefaultTypeInternal, startsession_response_),
  offsetof(::chat::StreamResponseDefaultTypeInternal, joinsession_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::StreamResponse, ResponseEvent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::StartSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::StartSession, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::JoinSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::JoinSession, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::JoinSession, session_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::Message, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::Message, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::Message, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::QuitSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::QuitSession, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::QuitSession, session_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::Login, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::Logout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::Logout, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::StartSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::StartSessionResponse, session_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::JoinSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::JoinSessionResponse, message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chat::StreamRequest)},
  { 10, -1, sizeof(::chat::StreamResponse)},
  { 21, -1, sizeof(::chat::StartSession)},
  { 27, -1, sizeof(::chat::JoinSession)},
  { 34, -1, sizeof(::chat::Message)},
  { 42, -1, sizeof(::chat::QuitSession)},
  { 49, -1, sizeof(::chat::Login)},
  { 55, -1, sizeof(::chat::Logout)},
  { 61, -1, sizeof(::chat::StartSessionResponse)},
  { 67, -1, sizeof(::chat::JoinSessionResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_StreamRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_StreamResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_StartSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_JoinSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_QuitSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_Login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_Logout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_StartSessionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_JoinSessionResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "chat.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nchat.proto\022\004chat\"\341\001\n\rStreamRequest\0222\n\024"
      "startSession_request\030\001 \001(\0132\022.chat.StartS"
      "essionH\000\0220\n\023joinSession_request\030\002 \001(\0132\021."
      "chat.JoinSessionH\000\022(\n\017message_request\030\003 "
      "\001(\0132\r.chat.MessageH\000\0220\n\023quitSession_requ"
      "est\030\004 \001(\0132\021.chat.QuitSessionH\000B\016\n\014Reques"
      "tEvent\"\224\002\n\016StreamResponse\022%\n\016login_respo"
      "nse\030\001 \001(\0132\013.chat.LoginH\000\022\'\n\017logout_respo"
      "nse\030\002 \001(\0132\014.chat.LogoutH\000\022)\n\020message_res"
      "ponse\030\003 \001(\0132\r.chat.MessageH\000\022;\n\025startses"
      "sion_response\030\004 \001(\0132\032.chat.StartSessionR"
      "esponseH\000\0229\n\024joinsession_response\030\005 \001(\0132"
      "\031.chat.JoinSessionResponseH\000B\017\n\rResponse"
      "Event\" \n\014StartSession\022\020\n\010userName\030\001 \001(\t\""
      "3\n\013JoinSession\022\020\n\010userName\030\001 \001(\t\022\022\n\nsess"
      "ion_id\030\002 \001(\t\"@\n\007Message\022\020\n\010userName\030\001 \001("
      "\t\022\022\n\nsession_id\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"3"
      "\n\013QuitSession\022\020\n\010userName\030\001 \001(\t\022\022\n\nsessi"
      "on_id\030\002 \001(\t\"\031\n\005Login\022\020\n\010userName\030\001 \001(\t\"\032"
      "\n\006Logout\022\020\n\010userName\030\001 \001(\t\"*\n\024StartSessi"
      "onResponse\022\022\n\nsession_id\030\001 \001(\t\"&\n\023JoinSe"
      "ssionResponse\022\017\n\007message\030\001 \001(\t2E\n\004Chat\022="
      "\n\nChatStream\022\023.chat.StreamRequest\032\024.chat"
      ".StreamResponse\"\000(\0010\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 949);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chat_2eproto
namespace chat {

// ===================================================================

void StreamRequest::InitAsDefaultInstance() {
  ::chat::_StreamRequest_default_instance_.startsession_request_ = const_cast< ::chat::StartSession*>(
      ::chat::StartSession::internal_default_instance());
  ::chat::_StreamRequest_default_instance_.joinsession_request_ = const_cast< ::chat::JoinSession*>(
      ::chat::JoinSession::internal_default_instance());
  ::chat::_StreamRequest_default_instance_.message_request_ = const_cast< ::chat::Message*>(
      ::chat::Message::internal_default_instance());
  ::chat::_StreamRequest_default_instance_.quitsession_request_ = const_cast< ::chat::QuitSession*>(
      ::chat::QuitSession::internal_default_instance());
}
void StreamRequest::set_allocated_startsession_request(::chat::StartSession* startsession_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RequestEvent();
  if (startsession_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      startsession_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, startsession_request, submessage_arena);
    }
    set_has_startsession_request();
    RequestEvent_.startsession_request_ = startsession_request;
  }
  // @@protoc_insertion_point(field_set_allocated:chat.StreamRequest.startSession_request)
}
void StreamRequest::set_allocated_joinsession_request(::chat::JoinSession* joinsession_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RequestEvent();
  if (joinsession_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      joinsession_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, joinsession_request, submessage_arena);
    }
    set_has_joinsession_request();
    RequestEvent_.joinsession_request_ = joinsession_request;
  }
  // @@protoc_insertion_point(field_set_allocated:chat.StreamRequest.joinSession_request)
}
void StreamRequest::set_allocated_message_request(::chat::Message* message_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RequestEvent();
  if (message_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message_request, submessage_arena);
    }
    set_has_message_request();
    RequestEvent_.message_request_ = message_request;
  }
  // @@protoc_insertion_point(field_set_allocated:chat.StreamRequest.message_request)
}
void StreamRequest::set_allocated_quitsession_request(::chat::QuitSession* quitsession_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_RequestEvent();
  if (quitsession_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quitsession_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quitsession_request, submessage_arena);
    }
    set_has_quitsession_request();
    RequestEvent_.quitsession_request_ = quitsession_request;
  }
  // @@protoc_insertion_point(field_set_allocated:chat.StreamRequest.quitSession_request)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamRequest::kStartSessionRequestFieldNumber;
const int StreamRequest::kJoinSessionRequestFieldNumber;
const int StreamRequest::kMessageRequestFieldNumber;
const int StreamRequest::kQuitSessionRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamRequest::StreamRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_2eproto::InitDefaultsStreamRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.StreamRequest)
}
StreamRequest::StreamRequest(const StreamRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_RequestEvent();
  switch (from.RequestEvent_case()) {
    case kStartSessionRequest: {
      mutable_startsession_request()->::chat::StartSession::MergeFrom(from.startsession_request());
      break;
    }
    case kJoinSessionRequest: {
      mutable_joinsession_request()->::chat::JoinSession::MergeFrom(from.joinsession_request());
      break;
    }
    case kMessageRequest: {
      mutable_message_request()->::chat::Message::MergeFrom(from.message_request());
      break;
    }
    case kQuitSessionRequest: {
      mutable_quitsession_request()->::chat::QuitSession::MergeFrom(from.quitsession_request());
      break;
    }
    case REQUESTEVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chat.StreamRequest)
}

void StreamRequest::SharedCtor() {
  clear_has_RequestEvent();
  _cached_size_ = 0;
}

StreamRequest::~StreamRequest() {
  // @@protoc_insertion_point(destructor:chat.StreamRequest)
  SharedDtor();
}

void StreamRequest::SharedDtor() {
  if (has_RequestEvent()) {
    clear_RequestEvent();
  }
}

void StreamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamRequest::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamRequest& StreamRequest::default_instance() {
  ::protobuf_chat_2eproto::InitDefaultsStreamRequest();
  return *internal_default_instance();
}

StreamRequest* StreamRequest::New(::google::protobuf::Arena* arena) const {
  StreamRequest* n = new StreamRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamRequest::clear_RequestEvent() {
// @@protoc_insertion_point(one_of_clear_start:chat.StreamRequest)
  switch (RequestEvent_case()) {
    case kStartSessionRequest: {
      delete RequestEvent_.startsession_request_;
      break;
    }
    case kJoinSessionRequest: {
      delete RequestEvent_.joinsession_request_;
      break;
    }
    case kMessageRequest: {
      delete RequestEvent_.message_request_;
      break;
    }
    case kQuitSessionRequest: {
      delete RequestEvent_.quitsession_request_;
      break;
    }
    case REQUESTEVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTEVENT_NOT_SET;
}


void StreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.StreamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_RequestEvent();
  _internal_metadata_.Clear();
}

bool StreamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.StreamRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chat.StartSession startSession_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_startsession_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.JoinSession joinSession_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joinsession_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.Message message_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.QuitSession quitSession_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quitsession_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.StreamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.StreamRequest)
  return false;
#undef DO_
}

void StreamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.StreamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chat.StartSession startSession_request = 1;
  if (has_startsession_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *RequestEvent_.startsession_request_, output);
  }

  // .chat.JoinSession joinSession_request = 2;
  if (has_joinsession_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *RequestEvent_.joinsession_request_, output);
  }

  // .chat.Message message_request = 3;
  if (has_message_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *RequestEvent_.message_request_, output);
  }

  // .chat.QuitSession quitSession_request = 4;
  if (has_quitsession_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *RequestEvent_.quitsession_request_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.StreamRequest)
}

::google::protobuf::uint8* StreamRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.StreamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chat.StartSession startSession_request = 1;
  if (has_startsession_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *RequestEvent_.startsession_request_, deterministic, target);
  }

  // .chat.JoinSession joinSession_request = 2;
  if (has_joinsession_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *RequestEvent_.joinsession_request_, deterministic, target);
  }

  // .chat.Message message_request = 3;
  if (has_message_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *RequestEvent_.message_request_, deterministic, target);
  }

  // .chat.QuitSession quitSession_request = 4;
  if (has_quitsession_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *RequestEvent_.quitsession_request_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.StreamRequest)
  return target;
}

size_t StreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.StreamRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (RequestEvent_case()) {
    // .chat.StartSession startSession_request = 1;
    case kStartSessionRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RequestEvent_.startsession_request_);
      break;
    }
    // .chat.JoinSession joinSession_request = 2;
    case kJoinSessionRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RequestEvent_.joinsession_request_);
      break;
    }
    // .chat.Message message_request = 3;
    case kMessageRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RequestEvent_.message_request_);
      break;
    }
    // .chat.QuitSession quitSession_request = 4;
    case kQuitSessionRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *RequestEvent_.quitsession_request_);
      break;
    }
    case REQUESTEVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.StreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.StreamRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.StreamRequest)
    MergeFrom(*source);
  }
}

void StreamRequest::MergeFrom(const StreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.StreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.RequestEvent_case()) {
    case kStartSessionRequest: {
      mutable_startsession_request()->::chat::StartSession::MergeFrom(from.startsession_request());
      break;
    }
    case kJoinSessionRequest: {
      mutable_joinsession_request()->::chat::JoinSession::MergeFrom(from.joinsession_request());
      break;
    }
    case kMessageRequest: {
      mutable_message_request()->::chat::Message::MergeFrom(from.message_request());
      break;
    }
    case kQuitSessionRequest: {
      mutable_quitsession_request()->::chat::QuitSession::MergeFrom(from.quitsession_request());
      break;
    }
    case REQUESTEVENT_NOT_SET: {
      break;
    }
  }
}

void StreamRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.StreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamRequest::CopyFrom(const StreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.StreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamRequest::IsInitialized() const {
  return true;
}

void StreamRequest::Swap(StreamRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamRequest::InternalSwap(StreamRequest* other) {
  using std::swap;
  swap(RequestEvent_, other->RequestEvent_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamRequest::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamResponse::InitAsDefaultInstance() {
  ::chat::_StreamResponse_default_instance_.login_response_ = const_cast< ::chat::Login*>(
      ::chat::Login::internal_default_instance());
  ::chat::_StreamResponse_default_instance_.logout_response_ = const_cast< ::chat::Logout*>(
      ::chat::Logout::internal_default_instance());
  ::chat::_StreamResponse_default_instance_.message_response_ = const_cast< ::chat::Message*>(
      ::chat::Message::internal_default_instance());
  ::chat::_StreamResponse_default_instance_.startsession_response_ = const_cast< ::chat::StartSessionResponse*>(
      ::chat::StartSessionResponse::internal_default_instance());
  ::chat::_StreamResponse_default_instance_.joinsession_response_ = const_cast< ::chat::JoinSessionResponse*>(
      ::chat::JoinSessionResponse::internal_default_instance());
}
void StreamResponse::set_allocated_login_response(::chat::Login* login_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ResponseEvent();
  if (login_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      login_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, login_response, submessage_arena);
    }
    set_has_login_response();
    ResponseEvent_.login_response_ = login_response;
  }
  // @@protoc_insertion_point(field_set_allocated:chat.StreamResponse.login_response)
}
void StreamResponse::set_allocated_logout_response(::chat::Logout* logout_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ResponseEvent();
  if (logout_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logout_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logout_response, submessage_arena);
    }
    set_has_logout_response();
    ResponseEvent_.logout_response_ = logout_response;
  }
  // @@protoc_insertion_point(field_set_allocated:chat.StreamResponse.logout_response)
}
void StreamResponse::set_allocated_message_response(::chat::Message* message_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ResponseEvent();
  if (message_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message_response, submessage_arena);
    }
    set_has_message_response();
    ResponseEvent_.message_response_ = message_response;
  }
  // @@protoc_insertion_point(field_set_allocated:chat.StreamResponse.message_response)
}
void StreamResponse::set_allocated_startsession_response(::chat::StartSessionResponse* startsession_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ResponseEvent();
  if (startsession_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      startsession_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, startsession_response, submessage_arena);
    }
    set_has_startsession_response();
    ResponseEvent_.startsession_response_ = startsession_response;
  }
  // @@protoc_insertion_point(field_set_allocated:chat.StreamResponse.startsession_response)
}
void StreamResponse::set_allocated_joinsession_response(::chat::JoinSessionResponse* joinsession_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ResponseEvent();
  if (joinsession_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      joinsession_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, joinsession_response, submessage_arena);
    }
    set_has_joinsession_response();
    ResponseEvent_.joinsession_response_ = joinsession_response;
  }
  // @@protoc_insertion_point(field_set_allocated:chat.StreamResponse.joinsession_response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamResponse::kLoginResponseFieldNumber;
const int StreamResponse::kLogoutResponseFieldNumber;
const int StreamResponse::kMessageResponseFieldNumber;
const int StreamResponse::kStartsessionResponseFieldNumber;
const int StreamResponse::kJoinsessionResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamResponse::StreamResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_2eproto::InitDefaultsStreamResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.StreamResponse)
}
StreamResponse::StreamResponse(const StreamResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ResponseEvent();
  switch (from.ResponseEvent_case()) {
    case kLoginResponse: {
      mutable_login_response()->::chat::Login::MergeFrom(from.login_response());
      break;
    }
    case kLogoutResponse: {
      mutable_logout_response()->::chat::Logout::MergeFrom(from.logout_response());
      break;
    }
    case kMessageResponse: {
      mutable_message_response()->::chat::Message::MergeFrom(from.message_response());
      break;
    }
    case kStartsessionResponse: {
      mutable_startsession_response()->::chat::StartSessionResponse::MergeFrom(from.startsession_response());
      break;
    }
    case kJoinsessionResponse: {
      mutable_joinsession_response()->::chat::JoinSessionResponse::MergeFrom(from.joinsession_response());
      break;
    }
    case RESPONSEEVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chat.StreamResponse)
}

void StreamResponse::SharedCtor() {
  clear_has_ResponseEvent();
  _cached_size_ = 0;
}

StreamResponse::~StreamResponse() {
  // @@protoc_insertion_point(destructor:chat.StreamResponse)
  SharedDtor();
}

void StreamResponse::SharedDtor() {
  if (has_ResponseEvent()) {
    clear_ResponseEvent();
  }
}

void StreamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamResponse::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamResponse& StreamResponse::default_instance() {
  ::protobuf_chat_2eproto::InitDefaultsStreamResponse();
  return *internal_default_instance();
}

StreamResponse* StreamResponse::New(::google::protobuf::Arena* arena) const {
  StreamResponse* n = new StreamResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamResponse::clear_ResponseEvent() {
// @@protoc_insertion_point(one_of_clear_start:chat.StreamResponse)
  switch (ResponseEvent_case()) {
    case kLoginResponse: {
      delete ResponseEvent_.login_response_;
      break;
    }
    case kLogoutResponse: {
      delete ResponseEvent_.logout_response_;
      break;
    }
    case kMessageResponse: {
      delete ResponseEvent_.message_response_;
      break;
    }
    case kStartsessionResponse: {
      delete ResponseEvent_.startsession_response_;
      break;
    }
    case kJoinsessionResponse: {
      delete ResponseEvent_.joinsession_response_;
      break;
    }
    case RESPONSEEVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSEEVENT_NOT_SET;
}


void StreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.StreamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ResponseEvent();
  _internal_metadata_.Clear();
}

bool StreamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.StreamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chat.Login login_response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_login_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.Logout logout_response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_logout_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.Message message_response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.StartSessionResponse startsession_response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_startsession_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.JoinSessionResponse joinsession_response = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joinsession_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.StreamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.StreamResponse)
  return false;
#undef DO_
}

void StreamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.StreamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chat.Login login_response = 1;
  if (has_login_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *ResponseEvent_.login_response_, output);
  }

  // .chat.Logout logout_response = 2;
  if (has_logout_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *ResponseEvent_.logout_response_, output);
  }

  // .chat.Message message_response = 3;
  if (has_message_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *ResponseEvent_.message_response_, output);
  }

  // .chat.StartSessionResponse startsession_response = 4;
  if (has_startsession_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *ResponseEvent_.startsession_response_, output);
  }

  // .chat.JoinSessionResponse joinsession_response = 5;
  if (has_joinsession_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *ResponseEvent_.joinsession_response_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.StreamResponse)
}

::google::protobuf::uint8* StreamResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.StreamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chat.Login login_response = 1;
  if (has_login_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *ResponseEvent_.login_response_, deterministic, target);
  }

  // .chat.Logout logout_response = 2;
  if (has_logout_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *ResponseEvent_.logout_response_, deterministic, target);
  }

  // .chat.Message message_response = 3;
  if (has_message_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *ResponseEvent_.message_response_, deterministic, target);
  }

  // .chat.StartSessionResponse startsession_response = 4;
  if (has_startsession_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *ResponseEvent_.startsession_response_, deterministic, target);
  }

  // .chat.JoinSessionResponse joinsession_response = 5;
  if (has_joinsession_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *ResponseEvent_.joinsession_response_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.StreamResponse)
  return target;
}

size_t StreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.StreamResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (ResponseEvent_case()) {
    // .chat.Login login_response = 1;
    case kLoginResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ResponseEvent_.login_response_);
      break;
    }
    // .chat.Logout logout_response = 2;
    case kLogoutResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ResponseEvent_.logout_response_);
      break;
    }
    // .chat.Message message_response = 3;
    case kMessageResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ResponseEvent_.message_response_);
      break;
    }
    // .chat.StartSessionResponse startsession_response = 4;
    case kStartsessionResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ResponseEvent_.startsession_response_);
      break;
    }
    // .chat.JoinSessionResponse joinsession_response = 5;
    case kJoinsessionResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ResponseEvent_.joinsession_response_);
      break;
    }
    case RESPONSEEVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.StreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.StreamResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.StreamResponse)
    MergeFrom(*source);
  }
}

void StreamResponse::MergeFrom(const StreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.StreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ResponseEvent_case()) {
    case kLoginResponse: {
      mutable_login_response()->::chat::Login::MergeFrom(from.login_response());
      break;
    }
    case kLogoutResponse: {
      mutable_logout_response()->::chat::Logout::MergeFrom(from.logout_response());
      break;
    }
    case kMessageResponse: {
      mutable_message_response()->::chat::Message::MergeFrom(from.message_response());
      break;
    }
    case kStartsessionResponse: {
      mutable_startsession_response()->::chat::StartSessionResponse::MergeFrom(from.startsession_response());
      break;
    }
    case kJoinsessionResponse: {
      mutable_joinsession_response()->::chat::JoinSessionResponse::MergeFrom(from.joinsession_response());
      break;
    }
    case RESPONSEEVENT_NOT_SET: {
      break;
    }
  }
}

void StreamResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.StreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamResponse::CopyFrom(const StreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.StreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamResponse::IsInitialized() const {
  return true;
}

void StreamResponse::Swap(StreamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamResponse::InternalSwap(StreamResponse* other) {
  using std::swap;
  swap(ResponseEvent_, other->ResponseEvent_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamResponse::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartSession::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartSession::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartSession::StartSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_2eproto::InitDefaultsStartSession();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.StartSession)
}
StartSession::StartSession(const StartSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.StartSession)
}

void StartSession::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StartSession::~StartSession() {
  // @@protoc_insertion_point(destructor:chat.StartSession)
  SharedDtor();
}

void StartSession::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StartSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartSession::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartSession& StartSession::default_instance() {
  ::protobuf_chat_2eproto::InitDefaultsStartSession();
  return *internal_default_instance();
}

StartSession* StartSession::New(::google::protobuf::Arena* arena) const {
  StartSession* n = new StartSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartSession::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.StartSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool StartSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.StartSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.StartSession.userName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.StartSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.StartSession)
  return false;
#undef DO_
}

void StartSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.StartSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.StartSession.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.StartSession)
}

::google::protobuf::uint8* StartSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.StartSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.StartSession.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.StartSession)
  return target;
}

size_t StartSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.StartSession)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.StartSession)
  GOOGLE_DCHECK_NE(&from, this);
  const StartSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.StartSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.StartSession)
    MergeFrom(*source);
  }
}

void StartSession::MergeFrom(const StartSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.StartSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void StartSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.StartSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartSession::CopyFrom(const StartSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.StartSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSession::IsInitialized() const {
  return true;
}

void StartSession::Swap(StartSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartSession::InternalSwap(StartSession* other) {
  using std::swap;
  username_.Swap(&other->username_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartSession::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinSession::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinSession::kUserNameFieldNumber;
const int JoinSession::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinSession::JoinSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_2eproto::InitDefaultsJoinSession();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.JoinSession)
}
JoinSession::JoinSession(const JoinSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.JoinSession)
}

void JoinSession::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

JoinSession::~JoinSession() {
  // @@protoc_insertion_point(destructor:chat.JoinSession)
  SharedDtor();
}

void JoinSession::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JoinSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinSession::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinSession& JoinSession::default_instance() {
  ::protobuf_chat_2eproto::InitDefaultsJoinSession();
  return *internal_default_instance();
}

JoinSession* JoinSession::New(::google::protobuf::Arena* arena) const {
  JoinSession* n = new JoinSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinSession::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.JoinSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool JoinSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.JoinSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.JoinSession.userName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.JoinSession.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.JoinSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.JoinSession)
  return false;
#undef DO_
}

void JoinSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.JoinSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.JoinSession.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.JoinSession.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.JoinSession)
}

::google::protobuf::uint8* JoinSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.JoinSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.JoinSession.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.JoinSession.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.JoinSession)
  return target;
}

size_t JoinSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.JoinSession)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.JoinSession)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.JoinSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.JoinSession)
    MergeFrom(*source);
  }
}

void JoinSession::MergeFrom(const JoinSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.JoinSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void JoinSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.JoinSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinSession::CopyFrom(const JoinSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.JoinSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinSession::IsInitialized() const {
  return true;
}

void JoinSession::Swap(JoinSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinSession::InternalSwap(JoinSession* other) {
  using std::swap;
  username_.Swap(&other->username_);
  session_id_.Swap(&other->session_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinSession::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kUserNameFieldNumber;
const int Message::kSessionIdFieldNumber;
const int Message::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_2eproto::InitDefaultsMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.Message)
}

void Message::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:chat.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::protobuf_chat_2eproto::InitDefaultsMessage();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Message.userName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Message.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Message.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Message.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Message.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Message.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Message.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Message.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Message.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  username_.Swap(&other->username_);
  session_id_.Swap(&other->session_id_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QuitSession::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitSession::kUserNameFieldNumber;
const int QuitSession::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitSession::QuitSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_2eproto::InitDefaultsQuitSession();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QuitSession)
}
QuitSession::QuitSession(const QuitSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.QuitSession)
}

void QuitSession::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QuitSession::~QuitSession() {
  // @@protoc_insertion_point(destructor:chat.QuitSession)
  SharedDtor();
}

void QuitSession::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QuitSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitSession::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuitSession& QuitSession::default_instance() {
  ::protobuf_chat_2eproto::InitDefaultsQuitSession();
  return *internal_default_instance();
}

QuitSession* QuitSession::New(::google::protobuf::Arena* arena) const {
  QuitSession* n = new QuitSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitSession::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QuitSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool QuitSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QuitSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QuitSession.userName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QuitSession.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QuitSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QuitSession)
  return false;
#undef DO_
}

void QuitSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QuitSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QuitSession.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QuitSession.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.QuitSession)
}

::google::protobuf::uint8* QuitSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QuitSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QuitSession.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QuitSession.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.QuitSession)
  return target;
}

size_t QuitSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QuitSession)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QuitSession)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QuitSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QuitSession)
    MergeFrom(*source);
  }
}

void QuitSession::MergeFrom(const QuitSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QuitSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void QuitSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QuitSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitSession::CopyFrom(const QuitSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QuitSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitSession::IsInitialized() const {
  return true;
}

void QuitSession::Swap(QuitSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitSession::InternalSwap(QuitSession* other) {
  using std::swap;
  username_.Swap(&other->username_);
  session_id_.Swap(&other->session_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitSession::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Login::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Login::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Login::Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_2eproto::InitDefaultsLogin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Login)
}
Login::Login(const Login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.Login)
}

void Login::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:chat.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Login& Login::default_instance() {
  ::protobuf_chat_2eproto::InitDefaultsLogin();
  return *internal_default_instance();
}

Login* Login::New(::google::protobuf::Arena* arena) const {
  Login* n = new Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Login.userName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Login.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.Login)
}

::google::protobuf::uint8* Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Login.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Login)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Login)
  GOOGLE_DCHECK_NE(&from, this);
  const Login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Login)
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  return true;
}

void Login::Swap(Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Login::InternalSwap(Login* other) {
  using std::swap;
  username_.Swap(&other->username_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Logout::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Logout::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logout::Logout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_2eproto::InitDefaultsLogout();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Logout)
}
Logout::Logout(const Logout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.Logout)
}

void Logout::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Logout::~Logout() {
  // @@protoc_insertion_point(destructor:chat.Logout)
  SharedDtor();
}

void Logout::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logout::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Logout& Logout::default_instance() {
  ::protobuf_chat_2eproto::InitDefaultsLogout();
  return *internal_default_instance();
}

Logout* Logout::New(::google::protobuf::Arena* arena) const {
  Logout* n = new Logout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Logout::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Logout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Logout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Logout.userName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Logout)
  return false;
#undef DO_
}

void Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Logout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Logout.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.Logout)
}

::google::protobuf::uint8* Logout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Logout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Logout.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.Logout)
  return target;
}

size_t Logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Logout)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Logout)
  GOOGLE_DCHECK_NE(&from, this);
  const Logout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Logout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Logout)
    MergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Logout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void Logout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logout::IsInitialized() const {
  return true;
}

void Logout::Swap(Logout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logout::InternalSwap(Logout* other) {
  using std::swap;
  username_.Swap(&other->username_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Logout::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartSessionResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartSessionResponse::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartSessionResponse::StartSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_2eproto::InitDefaultsStartSessionResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.StartSessionResponse)
}
StartSessionResponse::StartSessionResponse(const StartSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.StartSessionResponse)
}

void StartSessionResponse::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StartSessionResponse::~StartSessionResponse() {
  // @@protoc_insertion_point(destructor:chat.StartSessionResponse)
  SharedDtor();
}

void StartSessionResponse::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StartSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartSessionResponse::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartSessionResponse& StartSessionResponse::default_instance() {
  ::protobuf_chat_2eproto::InitDefaultsStartSessionResponse();
  return *internal_default_instance();
}

StartSessionResponse* StartSessionResponse::New(::google::protobuf::Arena* arena) const {
  StartSessionResponse* n = new StartSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.StartSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool StartSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.StartSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.StartSessionResponse.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.StartSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.StartSessionResponse)
  return false;
#undef DO_
}

void StartSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.StartSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.StartSessionResponse.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.StartSessionResponse)
}

::google::protobuf::uint8* StartSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.StartSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.StartSessionResponse.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.StartSessionResponse)
  return target;
}

size_t StartSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.StartSessionResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.StartSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartSessionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.StartSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.StartSessionResponse)
    MergeFrom(*source);
  }
}

void StartSessionResponse::MergeFrom(const StartSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.StartSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void StartSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.StartSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartSessionResponse::CopyFrom(const StartSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.StartSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSessionResponse::IsInitialized() const {
  return true;
}

void StartSessionResponse::Swap(StartSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartSessionResponse::InternalSwap(StartSessionResponse* other) {
  using std::swap;
  session_id_.Swap(&other->session_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartSessionResponse::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinSessionResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinSessionResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinSessionResponse::JoinSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_chat_2eproto::InitDefaultsJoinSessionResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.JoinSessionResponse)
}
JoinSessionResponse::JoinSessionResponse(const JoinSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.JoinSessionResponse)
}

void JoinSessionResponse::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

JoinSessionResponse::~JoinSessionResponse() {
  // @@protoc_insertion_point(destructor:chat.JoinSessionResponse)
  SharedDtor();
}

void JoinSessionResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JoinSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinSessionResponse::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinSessionResponse& JoinSessionResponse::default_instance() {
  ::protobuf_chat_2eproto::InitDefaultsJoinSessionResponse();
  return *internal_default_instance();
}

JoinSessionResponse* JoinSessionResponse::New(::google::protobuf::Arena* arena) const {
  JoinSessionResponse* n = new JoinSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.JoinSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool JoinSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.JoinSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.JoinSessionResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.JoinSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.JoinSessionResponse)
  return false;
#undef DO_
}

void JoinSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.JoinSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.JoinSessionResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.JoinSessionResponse)
}

::google::protobuf::uint8* JoinSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.JoinSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.JoinSessionResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.JoinSessionResponse)
  return target;
}

size_t JoinSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.JoinSessionResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.JoinSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinSessionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.JoinSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.JoinSessionResponse)
    MergeFrom(*source);
  }
}

void JoinSessionResponse::MergeFrom(const JoinSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.JoinSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void JoinSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.JoinSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinSessionResponse::CopyFrom(const JoinSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.JoinSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinSessionResponse::IsInitialized() const {
  return true;
}

void JoinSessionResponse::Swap(JoinSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinSessionResponse::InternalSwap(JoinSessionResponse* other) {
  using std::swap;
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinSessionResponse::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chat

// @@protoc_insertion_point(global_scope)
